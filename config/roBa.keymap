#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R                      &kp T                                                  &kp Y        &kp U  &kp I      &kp O    &kp P
&lt 2 A    &kp S         &kp D         &kp F                      &kp G      &kp LS(LG(S))                &kp TAB        &kp H        &kp J  &lt 5 K    &kp L    &lt 2 MINUS
&kp Z      &kp X         &kp C         &kp V                      &kp B      &kp LEFT_SHIFT               &kp DEL        &kp N        &kp M  &kp COMMA  &kp DOT  &lt 7 SLASH
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 3 LS(CAPS)  &kp SPACE  &lt_to_layer_0 1 LS(CAPS)    &kp BACKSPACE  &lt 1 ENTER                             &lt 3 ESC
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PIPE                              &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACE    &kp HOME
&trans  &trans  &kp GRAVE         &kp TILDE          &kp UNDER     &trans    &trans        &kp COLON             &kp SEMICOLON          &kp SQT         &kp DOUBLE_QUOTES  &kp END
&trans  &trans  &kp LESS_THAN     &kp GREATER_THAN   &kp QUESTION  &trans    &kp ASTERISK  &kp PLUS              &kp EQUAL              &kp SLASH       &kp BACKSLASH      &kp PAGE_UP
&trans  &trans  &trans            &trans             &trans        &trans    &trans        &trans                                                                          &kp PAGE_DOWN
            >;
        };

        NUM {
            bindings = <
&trans  &kp F9  &kp F10  &kp F11  &kp F12                     &trans  &kp N7  &kp N8  &kp N9  &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans     &trans  &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &kp ESC    &trans  &trans  &kp N1  &kp N2  &kp N3  &trans
&trans  &trans  &trans   &trans   &trans   &trans     &trans  &kp N0                          &trans
            >;
        };

        ARROW {
            bindings = <
&kp TAB        &trans         &trans     &trans     &kp LC(P)                    &trans  &trans          &trans          &trans           &trans
&kp LC(A)      &kp LC(S)      &kp LG(D)  &kp LC(F)  &trans     &trans    &trans  &trans  &trans          &kp UP_ARROW    &trans           &trans
&kp LC(Z)      &kp LC(Y)      &kp LC(C)  &kp LC(V)  &kp LC(N)  &trans    &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp LS(LG(S))  &kp LS(LC(S))  &trans     &trans     &trans     &trans    &trans  &trans                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &trans    &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &mkp MB3    &trans    &trans    &mkp MB1  &trans  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans    &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &mkp MB5  &mkp MB4                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &trans    &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &mkp MB3    &trans    &trans    &mkp MB1  &trans  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans    &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &mkp MB5  &mkp MB4                              &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp N1  &kp N2  &kp N3  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans                 &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                 &kp DOLLAR     &kp PERCENT   &kp CARET             &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                 &kp EXCL       &kp AT        &kp HASH              &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp RIGHT_PARENTHESIS                                                     &trans
            >;
        };
    };
};
